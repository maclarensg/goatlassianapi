package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"golang.org/x/exp/slog"
)

func auth(email, token string) string {
	auth := "Basic " + base64.StdEncoding.EncodeToString([]byte(email+":"+token))
	return auth
}

func main() {
	// Set up the base URL and endpoint
	baseURL := "https://comfortdelgrotaxi.atlassian.net/rest/api/3/"
	endpoint := "groups/picker"

	// Get the email and token
	email := "gavinyap@comfortdelgro.com"
	token := "ATATT3xFfGF0lNohYVdMEo1pL5vSXEzIDB_eupZyLf-8RDZVRm9G5sZ6vljGokIsHTdsRCFQoBulYoM-L_CB9WEQFhYc1w0HB93ux-3EhSBI_D4ad-vclKMhvv6Hg2IX8Oh0f8f5NNzE-zhgSGq3kjzw6JAZ3kVcDIh4Soqdxx8705gY8FJ6ZAg=DDDD6747"

	// Create http client
	client := &http.Client{}

	// Make the request
	req, err := http.NewRequest("GET", baseURL+endpoint+"?maxResults=1000", nil)
	req.Header.Set("Authorization", auth(email, token))

	// Check for errors
	if err != nil {
		slog.Error(fmt.Sprintf("Error: %s", err))
	}

	// Send the request via a client
	// Do sends an HTTP request and
	// returns an HTTP response
	response, err := client.Do(req)
	if err != nil {
		slog.Error(fmt.Sprintf("Error: %s", err))
	}

	// Defer the closing of the body
	defer response.Body.Close()

	// If we get a 200 OK response
	if response.StatusCode == 200 {
		// Read the data from the response
		bytes, err := io.ReadAll(response.Body)
		if err != nil {
			slog.Error(fmt.Sprintf("Error: %s", err))
		}
		// parse bytes to json
		var result map[string]interface{}
		json.Unmarshal([]byte(bytes), &result)
		groups := result["groups"]
		for _, group := range groups.([]interface{}) {
			fmt.Println(group.(map[string]interface{})["name"])
		}

	}
}
